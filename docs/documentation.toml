[tp.config]
name = "config"
description = """This module exposes Templater's running configuration.

This is mostly useful when writing scripts requiring some context information.
"""

[tp.config.functions.template_file]
name = "template_file"
description = "The `TFile` object representing the template file."
definition = "tp.config.template_file"

[tp.config.functions.target_file]
name = "target_file"
description = "The `TFile` object representing the target file where the template will be inserted."
definition = "tp.config.target_file"

[tp.config.functions.run_mode]
name = "run_mode"
description = "The `RunMode`, representing the way Templater was launched (Create new from template, Append to active file, ...)"
definition = "tp.config.run_mode"

[tp.config.functions.active_file]
name = "active_file"
description = "The active file (if existing) when launching Templater."
definition = "tp.config.active_file?"




[tp.date]
name = "date"
description = "This module contains every internal function related to dates."

[tp.date.functions.now]
name = "now"
description = "Retrieves the date."
definition = "tp.date.now(format: string = \"YYYY-MM-DD\", offset?: number⎮string, reference?: string, reference_format?: string)"

[tp.date.functions.now.args.format]
name = "format"
description = "Format for the date, refer to [format reference](https://momentjs.com/docs/#/displaying/format/)"

[tp.date.functions.now.args.offset]
name = "offset"
description = "Offset for the day, e.g. set this to `-7` to get last week's date. You can also specify the offset as a string using the ISO 8601 format"

[tp.date.functions.now.args.reference]
name = "reference"
description = "The date referential, e.g. set this to the note's title"

[tp.date.functions.now.args.reference_format]
name = "reference_format"
description = "The date reference format."

[tp.date.functions.tomorrow]
name = "tomorrow"
description = "Retrieves tomorrow's date."
definition = "tp.date.tomorrow(format: string = \"YYYY-MM-DD\")"

[tp.date.functions.tomorrow.args.format]
name = "format"
description = "Format for the date, refer to [format reference](https://momentjs.com/docs/#/displaying/format/)"

[tp.date.functions.yesterday]
name = "yesterday"
description = "Retrieves yesterday's date."
definition = "tp.date.yesterday(format: string = \"YYYY-MM-DD\")"

[tp.date.functions.yesterday.args.format]
name = "format"
description = "Format for the date, refer to [format reference](https://momentjs.com/docs/#/displaying/format/)"

[tp.date.functions.weekday]
name = "weekday"
description = ""
definition = "tp.date.weekday(format: string = \"YYYY-MM-DD\", weekday: number, reference?: string, reference_format?: string)"

[tp.date.functions.weekday.args.format]
name = "format"
description = "Format for the date, refer to [format reference](https://momentjs.com/docs/#/displaying/format/)"

[tp.date.functions.weekday.args.weekday]
name = "weekday"
description = "Week day number. If the locale assigns Monday as the first day of the week, `0` will be Monday, `-7` will be last week's day."

[tp.date.functions.weekday.args.reference]
name = "reference"
description = "The date referential, e.g. set this to the note's title"

[tp.date.functions.weekday.args.reference_format]
name = "reference_format"
description = "The date reference format."



[tp.file]
name = "file"
description = "This module contains every internal function related to files."

[tp.file.functions.content]
name = "content"
description = "Retrieves the file's content"
definition = "tp.file.content"

[tp.file.functions.create_new]
name = "create_new"
description = "Creates a new file using a specified template or with a specified content."
definition = "tp.file.create_new(template: TFile ⎮ string, filename?: string, open_new: boolean = false, folder?: TFolder)"

[tp.file.functions.create_new.args.template]
name = "template"
description = "Either the template used for the new file content, or the file content as a string. If it is the template to use, you retrieve it with `tp.file.find_tfile(TEMPLATENAME)`"

[tp.file.functions.create_new.args.filename]
name = "filename"
description = "The filename of the new file, defaults to \"Untitled\"."

[tp.file.functions.create_new.args.open_new]
name = "open_new"
description = "Whether to open or not the newly created file. Warning: if you use this option, since commands are executed asynchronously, the file can be opened first and then other commands are appended to that new file and not the previous file."

[tp.file.functions.create_new.args.folder]
name = "folder"
description = "The folder to put the new file in, defaults to obsidian's default location. If you want the file to appear in a different folder, specify it with `app.vault.getAbstractFileByPath(\"FOLDERNAME\")`"


[tp.file.functions.creation_date]
name = "creation_date"
description = "Retrieves the file's creation date."
definition = "tp.file.creation_date(format: string = \"YYYY-MM-DD HH:mm\")"

[tp.file.functions.creation_date.args.format]
name = "format"
description = "Format for the date, refer to format reference"

[tp.file.functions.cursor]
name = "cursor"
description = """
Sets the cursor to this location after the template has been inserted. 

You can navigate between the different tp.file.cursor using the configured hotkey in obsidian settings.
"""
definition = "tp.file.cursor(order?: number)"

[tp.file.functions.cursor.args.order]
name = "order"
description = """
The order of the different cursors jump, e.g. it will jump from 1 to 2 to 3, and so on.
If you specify multiple tp.file.cursor with the same order, the editor will switch to multi-cursor.
"""

[tp.file.functions.cursor_append]
name = "cursor_append"
description = "Appends some content after the active cursor in the file."
definition = "tp.file.cursor_append(content: string)"

[tp.file.functions.cursor_append.args.content]
name = "content"
description = "The content to append after the active cursor"

[tp.file.functions.exists]
name = "exists"
description = "The filename of the file we want to check existence. The fullpath to the file, relative to the Vault and containing the extension, must be provided. e.g. MyFolder/SubFolder/MyFile."
definition = "tp.file.exists(filename: string)"

[tp.file.functions.exists.args.filename]
name = "filename"
description = "The filename of the file we want to check existence, e.g. MyFile."

[tp.file.functions.find_tfile]
name = "find_tfile"
description = "Search for a file and returns its `TFile` instance"
definition = "tp.file.find_tfile(filename: string)"

[tp.file.functions.find_tfile.args.filename]
name = "filename"
description = "The filename we want to search and resolve as a `TFile`"

[tp.file.functions.folder]
name = "folder"
description = "Retrieves the file's folder name."
definition = "tp.file.folder(relative: boolean = false)"

[tp.file.functions.folder.args.relative]
name = "relative"
description = "If set to true, appends the vault relative path to the folder name."

[tp.file.functions.include]
name = "include"
description = "Includes the file's link content. Templates in the included content will be resolved."
definition = "tp.file.include(include_link: string ⎮ TFile)"

[tp.file.functions.include.args.include_link]
name = "include_link"
description = "The link to the file to include, e.g. [[MyFile]], or a TFile object. Also supports sections or blocks inclusions, e.g. [[MyFile#Section1]]"

[tp.file.functions.last_modified_date]
name = "last_modified_date"
description = "Retrieves the file's last modification date."
definition = "tp.file.last_modified_date(format: string = \"YYYY-MM-DD HH:mm\")"

[tp.file.functions.last_modified_date.args.format]
name = "format"
description = "Format for the date, refer to format reference."

[tp.file.functions.move]
name = "functions.move"
description = "Moves the file to the desired vault location."
definition = "tp.file.move(new_path: string, file_to_move?: TFile)"

[tp.file.functions.move.args.new_path]
name = "new_path"
description = "The new vault relative path of the file, without the file extension. Note: the new path needs to include the folder and the filename, e.g. /Notes/MyNote"

[tp.file.functions.path]
name = "path"
description = "Retrieves the file's absolute path on the system."
definition = "tp.file.path(relative: boolean = false)"

[tp.file.functions.path.args.relative]
name = "relative"
description = "If set to true, only retrieves the vault's relative path."

[tp.file.functions.rename]
name = "rename"
description = "Renames the file (keeps the same file extension)."
definition = "tp.file.rename(new_title: string)"

[tp.file.functions.rename.args.new_title]
name = "new_title"
description = "The new file title."

[tp.file.functions.selection]
name = "selection"
description = "Retrieves the active file's text selection."
definition = "tp.file.selection()"

[tp.file.functions.tags]
name = "tags"
description = "Retrieves the file's tags (array of string)"
definition = "tp.file.tags"

[tp.file.functions.title]
name = "title"
definition = "tp.file.title"
description = "Retrieves the file's title."



[tp.frontmatter]
name = "frontmatter"
description = "This modules exposes all the frontmatter variables of a file as variables."

[tp.obsidian]
name = "obsidian"
description = "This module exposes all the functions and classes from the obsidian API."


[tp.system]
name = "system"
description = "This module contains system related functions."

[tp.system.functions.clipboard]
name = "clipboard"
description = "Retrieves the clipboard's content"
definition = "tp.system.clipboard()"

[tp.system.functions.prompt]
name = "prompt"
description = "Spawns a prompt modal and returns the user's input."
definition = "tp.system.prompt(prompt_text?: string, default_value?: string, throw_on_cancel: boolean = false, multiline?: boolean = false)"

[tp.system.functions.prompt.args.prompt_text]
name = "prompt_text"
description = "Text placed above the input field"

[tp.system.functions.prompt.args.default_value]
name = "default_value"
description = "A default value for the input field"

[tp.system.functions.prompt.args.throw_on_cancel]
name = "throw_on_cancel"
description = "Throws an error if the prompt is canceled, instead of returning a `null` value"

[tp.system.functions.prompt.args.multiline]
name = "multiline"
description = "If set to true, the input field will be a multiline textarea"

[tp.system.functions.suggester]
name = "suggester"
description = "Spawns a suggester prompt and returns the user's chosen item."
definition = "tp.system.suggester(text_items: string[] ⎮ ((item: T) => string), items: T[], throw_on_cancel: boolean = false, placeholder: string = \"\", limit?: number = undefined)"

[tp.system.functions.suggester.args.text_items]
name = "text_items"
description = "Array of strings representing the text that will be displayed for each item in the suggester prompt. This can also be a function that maps an item to its text representation."

[tp.system.functions.suggester.args.items]
name = "items"
description = "Array containing the values of each item in the correct order."

[tp.system.functions.suggester.args.throw_on_cancel]
name = "throw_on_cancel"
description = "Throws an error if the prompt is canceled, instead of returning a `null` value"

[tp.system.functions.suggester.args.placeholder]
name = "placeholder"
description = "Placeholder string of the prompt"

[tp.system.functions.suggester.args.limit]
name = "limit"
description = "Limit the number of items rendered at once (useful to improve performance when displaying large lists)"

[tp.web]
name = "web"
description = "This modules contains every internal function related to the web (making web requests)."

[tp.web.functions.daily_quote]
name = "daily_quote"
description = "Retrieves and parses the daily quote from the API https://api.quotable.io"
definition = "tp.web.daily_quote()"

[tp.web.functions.random_picture]
name = "random_picture"
description = "Gets a random image from https://unsplash.com/"
definition = "tp.web.random_picture(size?: string, query?: string, include_size?: boolean)"

[tp.web.functions.random_picture.args.size]
name = "size"
description = "Image size in the format `<width>x<height>`"

[tp.web.functions.random_picture.args.query]
name = "query"
description = "Limits selection to photos matching a search term. Multiple search terms can be passed separated by a comma `,`"

[tp.web.functions.random_picture.args.include_dimensions]
name = "include_size"
description = "Optional argument to include the specified size in the image link markdown. Defaults to false"
